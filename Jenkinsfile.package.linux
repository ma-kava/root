#!groovy

def pixetBuildsDir = "/media/nox2/Software/Builds/pixet/releases"
def customersDir = "/media/nox2/Software/Public/pixet/customers/"
def pixetVersion = "0.0.0"

pipeline {
  agent {
    label 'linux01' 
  }

  options {
    timeout(time: 15, unit: 'MINUTES')
    timestamps()
    ansiColor("xterm")
  }

  parameters {
    string(name: 'customerName', 
      defaultValue: '', 
      description: 'Name of the customer.\nInternal licence with no explicit configuration files will be used if empty.\nValue also determine the folder the configuration and factory configuration will be copied from and the result will be placed to.\nPlease place configuration files to \"nox2/advacam/Software/pixet/customers/CustomerName/_in\" folder, the built packages will be created in \"nox2/advacam/Software/pixet/customers/CustomerName\" folder.')  
    booleanParam(name: 'api', 
      defaultValue: true,
      description: "Add also API to the package.")
    booleanParam(name: 'edu', 
      defaultValue: false,
      description: "Create EDU version of the package.")
    choice(name: 'distribution_version',
      choices: ['external', 'internal', 'edu'],
      description: "Different package version has different set of plugins.")
   }

  environment {
    TERM = 'xterm'
  }

  stages {

    stage ('Copying files') {
      steps{
        script{
          
          def lastPixetBuild = sh (script: """ls -d ${pixetBuildsDir}/*/ | sort | tail -1""", returnStdout: true).trim()
          sh """
            mkdir -p _build/devices_configs
            cp ${lastPixetBuild}/*Linux_x64.zip _build
            """
          pixetVersion = sh( script: """ls _build/Pixet_API*Linux_x64.zip | grep -o \'[0-9]*\\.[0-9]*\\.[0-9]*\'""", returnStdout: true).trim()

          if ( params.customerName.trim().length() ){
            def sourceDir = customersDir + "/" + params.customerName.trim().replaceAll(" ","\\\\ ") + "/_in"
            sh """
              if [ "\$(ls -A ${sourceDir})"  ]; then
                cp ${sourceDir}/* _build/devices_configs
              fi
              """          
          }
        }
      }
    }
  
    stage ('Creating packages') {
      steps{
        script{
          def workspacePath = env.WORKSPACE
          def packagerParams = "deb rpm targz"
          if (params.edu) {
            packagerParams = packagerParams + " edu"
          }
          if (params.api) {
            packagerParams = packagerParams + " api"
          }
          if (params.customerName.trim().length()) {
            packagerParams = packagerParams + " -lic \\\"" + params.customerName.trim() + "\\\"";
          }
          sh """
             docker run --rm --user 1001:1001 -v "${workspacePath}":/opt/PixetPackage:Z -t ubuntu22.04dev_64 bash -c "cd /opt/PixetPackage; bash ./package_linux.sh -pversion ${pixetVersion} ${packagerParams} -distribution_version ${params.distribution_version}"
             """    
        }
      }
    }

    stage ('Deploying to nox2') {
      steps{
        script{
          def destinationDir = sh (script: """ls -d ${pixetBuildsDir}/*/ | sort | tail -1""", returnStdout: true).trim()          
          if ( params.customerName.trim().length() ){
            destinationDir = customersDir + "/" + params.customerName.trim().replaceAll(" ","\\\\ ")
          }
          def VER = params.edu ? "EDU" : "Pro"
          sh """
            mkdir -p ${destinationDir} 
            rm -f ${destinationDir}/PIXet_${VER}_GUI_${pixetVersion}_Linux_x64.deb ${destinationDir}/PIXet_${VER}_GUI_${pixetVersion}_Linux_x64.rpm ${destinationDir}/PIXet_${VER}_GUI_${pixetVersion}_Linux_x64.tar.gz
            cp _build/pixet.deb ${destinationDir}/PIXet_${VER}_GUI_${pixetVersion}_Linux_x64.deb
            cp _build/pixet.rpm ${destinationDir}/PIXet_${VER}_GUI_${pixetVersion}_Linux_x64.rpm
            cp _build/pixet.tar.gz ${destinationDir}/PIXet_${VER}_GUI_${pixetVersion}_Linux_x64.tar.gz
            """
          if (params.api) {
            sh """
              rm -f ${destinationDir}/PIXet_${VER}_API_${pixetVersion}_Linux_x64.tar.gz
              cp _build/pixetAPI.tar.gz ${destinationDir}/_TEST_DO_NOT_USE_PIXet_${VER}_API_${pixetVersion}_Linux_x64.tar.gz
              """            
          }
        }
      }
    }

  }

  post {
    unsuccessful {
      slackSend channel:  "#jenkins", message: "PIXet packaging for linux failed.\n <${currentBuild.absoluteUrl}|${currentBuild.absoluteUrl}>"
    }
    always {
      cleanWs()
    }
  }    

}
